// This file is auto-generated by @hey-api/openapi-ts

export type BodyLoginAuthLoginPost = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type CreateGroup = {
    name: string;
};

export type EmailConfirmationRequest = {
    frontend_url: string;
    token: number;
};

export type Group = {
    id?: string;
    created_at?: string;
    updated_at?: string;
    name: string;
};

export type GroupInviteCreate = {
    email?: string | null;
};

export type GroupInviteResponse = {
    id: string;
    email?: string | null;
    group_id: string;
    token: string;
    created_at: string;
};

export type GroupWithUsersResponse = {
    id: string;
    name: string;
    users?: Array<UserResponse>;
    invites?: Array<GroupInviteResponse> | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type InvitationTokenResponse = {
    token: string;
};

export type Token = {
    access_token: string;
    token_type: string;
};

export type UpdateGroup = {
    name: string;
};

export type UserCreate = {
    email: string;
    password: string;
    username: string;
};

export type UserInfoUpdate = {
    username: string;
};

export type UserResponse = {
    id: string;
    email: string;
    username: string;
    created_at: string;
    updated_at: string;
};

export type UserUpdatePassword = {
    old_password: string;
    new_password: string;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type DeleteUserAccountDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/account/';
};

export type DeleteUserAccountDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteUserAccountDeleteResponse = DeleteUserAccountDeleteResponses[keyof DeleteUserAccountDeleteResponses];

export type ReadUsersMeAccountGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/account/';
};

export type ReadUsersMeAccountGetResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type ReadUsersMeAccountGetResponse = ReadUsersMeAccountGetResponses[keyof ReadUsersMeAccountGetResponses];

export type UpdateUserInfoAccountPutData = {
    body: UserInfoUpdate;
    path?: never;
    query?: never;
    url: '/account/';
};

export type UpdateUserInfoAccountPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserInfoAccountPutError = UpdateUserInfoAccountPutErrors[keyof UpdateUserInfoAccountPutErrors];

export type UpdateUserInfoAccountPutResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type UpdateUserInfoAccountPutResponse = UpdateUserInfoAccountPutResponses[keyof UpdateUserInfoAccountPutResponses];

export type UpdatePasswordAccountPasswordPutData = {
    body: UserUpdatePassword;
    path?: never;
    query?: never;
    url: '/account/password';
};

export type UpdatePasswordAccountPasswordPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdatePasswordAccountPasswordPutError = UpdatePasswordAccountPasswordPutErrors[keyof UpdatePasswordAccountPasswordPutErrors];

export type UpdatePasswordAccountPasswordPutResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type UpdatePasswordAccountPasswordPutResponse = UpdatePasswordAccountPasswordPutResponses[keyof UpdatePasswordAccountPasswordPutResponses];

export type RegisterAuthRegisterPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterAuthRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterAuthRegisterPostError = RegisterAuthRegisterPostErrors[keyof RegisterAuthRegisterPostErrors];

export type RegisterAuthRegisterPostResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type RegisterAuthRegisterPostResponse = RegisterAuthRegisterPostResponses[keyof RegisterAuthRegisterPostResponses];

export type LoginAuthLoginPostData = {
    body: BodyLoginAuthLoginPost;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginAuthLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginAuthLoginPostError = LoginAuthLoginPostErrors[keyof LoginAuthLoginPostErrors];

export type LoginAuthLoginPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginAuthLoginPostResponse = LoginAuthLoginPostResponses[keyof LoginAuthLoginPostResponses];

export type ConfirmEmailAuthConfirmEmailPostData = {
    body: EmailConfirmationRequest;
    path?: never;
    query?: never;
    url: '/auth/confirm-email';
};

export type ConfirmEmailAuthConfirmEmailPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ConfirmEmailAuthConfirmEmailPostError = ConfirmEmailAuthConfirmEmailPostErrors[keyof ConfirmEmailAuthConfirmEmailPostErrors];

export type ConfirmEmailAuthConfirmEmailPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type ConfirmEmailAuthConfirmEmailPostResponse = ConfirmEmailAuthConfirmEmailPostResponses[keyof ConfirmEmailAuthConfirmEmailPostResponses];

export type ReadGroupsGroupsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/groups/';
};

export type ReadGroupsGroupsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Group>;
};

export type ReadGroupsGroupsGetResponse = ReadGroupsGroupsGetResponses[keyof ReadGroupsGroupsGetResponses];

export type CreateGroupGroupsPostData = {
    body: CreateGroup;
    path?: never;
    query?: never;
    url: '/groups/';
};

export type CreateGroupGroupsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateGroupGroupsPostError = CreateGroupGroupsPostErrors[keyof CreateGroupGroupsPostErrors];

export type CreateGroupGroupsPostResponses = {
    /**
     * Successful Response
     */
    200: Group;
};

export type CreateGroupGroupsPostResponse = CreateGroupGroupsPostResponses[keyof CreateGroupGroupsPostResponses];

export type DeleteGroupGroupsGroupIdDeleteData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: never;
    url: '/groups/{group_id}';
};

export type DeleteGroupGroupsGroupIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteGroupGroupsGroupIdDeleteError = DeleteGroupGroupsGroupIdDeleteErrors[keyof DeleteGroupGroupsGroupIdDeleteErrors];

export type DeleteGroupGroupsGroupIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteGroupGroupsGroupIdDeleteResponse = DeleteGroupGroupsGroupIdDeleteResponses[keyof DeleteGroupGroupsGroupIdDeleteResponses];

export type ReadGroupGroupsGroupIdGetData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: never;
    url: '/groups/{group_id}';
};

export type ReadGroupGroupsGroupIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadGroupGroupsGroupIdGetError = ReadGroupGroupsGroupIdGetErrors[keyof ReadGroupGroupsGroupIdGetErrors];

export type ReadGroupGroupsGroupIdGetResponses = {
    /**
     * Successful Response
     */
    200: GroupWithUsersResponse;
};

export type ReadGroupGroupsGroupIdGetResponse = ReadGroupGroupsGroupIdGetResponses[keyof ReadGroupGroupsGroupIdGetResponses];

export type UpdateGroupGroupsGroupIdPutData = {
    body: UpdateGroup;
    path: {
        group_id: string;
    };
    query?: never;
    url: '/groups/{group_id}';
};

export type UpdateGroupGroupsGroupIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateGroupGroupsGroupIdPutError = UpdateGroupGroupsGroupIdPutErrors[keyof UpdateGroupGroupsGroupIdPutErrors];

export type UpdateGroupGroupsGroupIdPutResponses = {
    /**
     * Successful Response
     */
    200: Group;
};

export type UpdateGroupGroupsGroupIdPutResponse = UpdateGroupGroupsGroupIdPutResponses[keyof UpdateGroupGroupsGroupIdPutResponses];

export type DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteData = {
    body?: never;
    path: {
        group_id: string;
        user_id: string;
    };
    query?: never;
    url: '/groups/{group_id}/users/{user_id}';
};

export type DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteError = DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteErrors[keyof DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteErrors];

export type DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: GroupWithUsersResponse;
};

export type DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse = DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteResponses[keyof DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteResponses];

export type GetMyInvitesInvitesMyInvitesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/invites/my-invites';
};

export type GetMyInvitesInvitesMyInvitesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<GroupInviteResponse>;
};

export type GetMyInvitesInvitesMyInvitesGetResponse = GetMyInvitesInvitesMyInvitesGetResponses[keyof GetMyInvitesInvitesMyInvitesGetResponses];

export type GenerateInviteLinkInvitesGroupIdGeneratePostData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: never;
    url: '/invites/{group_id}/generate';
};

export type GenerateInviteLinkInvitesGroupIdGeneratePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateInviteLinkInvitesGroupIdGeneratePostError = GenerateInviteLinkInvitesGroupIdGeneratePostErrors[keyof GenerateInviteLinkInvitesGroupIdGeneratePostErrors];

export type GenerateInviteLinkInvitesGroupIdGeneratePostResponses = {
    /**
     * Successful Response
     */
    200: InvitationTokenResponse;
};

export type GenerateInviteLinkInvitesGroupIdGeneratePostResponse = GenerateInviteLinkInvitesGroupIdGeneratePostResponses[keyof GenerateInviteLinkInvitesGroupIdGeneratePostResponses];

export type InviteByEmailInvitesGroupIdEmailPostData = {
    body: GroupInviteCreate;
    path: {
        group_id: string;
    };
    query?: never;
    url: '/invites/{group_id}/email';
};

export type InviteByEmailInvitesGroupIdEmailPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InviteByEmailInvitesGroupIdEmailPostError = InviteByEmailInvitesGroupIdEmailPostErrors[keyof InviteByEmailInvitesGroupIdEmailPostErrors];

export type InviteByEmailInvitesGroupIdEmailPostResponses = {
    /**
     * Successful Response
     */
    200: GroupInviteResponse;
};

export type InviteByEmailInvitesGroupIdEmailPostResponse = InviteByEmailInvitesGroupIdEmailPostResponses[keyof InviteByEmailInvitesGroupIdEmailPostResponses];

export type AcceptInviteInvitesAcceptTokenGetData = {
    body?: never;
    path: {
        token: string;
    };
    query?: never;
    url: '/invites/accept/{token}';
};

export type AcceptInviteInvitesAcceptTokenGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AcceptInviteInvitesAcceptTokenGetError = AcceptInviteInvitesAcceptTokenGetErrors[keyof AcceptInviteInvitesAcceptTokenGetErrors];

export type AcceptInviteInvitesAcceptTokenGetResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type AcceptInviteInvitesAcceptTokenGetResponse = AcceptInviteInvitesAcceptTokenGetResponses[keyof AcceptInviteInvitesAcceptTokenGetResponses];

export type RejectInviteInvitesRejectTokenDeleteData = {
    body?: never;
    path: {
        token: string;
    };
    query?: never;
    url: '/invites/reject/{token}';
};

export type RejectInviteInvitesRejectTokenDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RejectInviteInvitesRejectTokenDeleteError = RejectInviteInvitesRejectTokenDeleteErrors[keyof RejectInviteInvitesRejectTokenDeleteErrors];

export type RejectInviteInvitesRejectTokenDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RejectInviteInvitesRejectTokenDeleteResponse = RejectInviteInvitesRejectTokenDeleteResponses[keyof RejectInviteInvitesRejectTokenDeleteResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};