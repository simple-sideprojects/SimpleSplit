// This file is auto-generated by @hey-api/openapi-ts

import { type Options, deleteUserAccountDelete, readUsersMeAccountGet, updateUserInfoAccountPut, updatePasswordAccountPasswordPut, registerAuthRegisterPost, loginAuthLoginPost, confirmEmailAuthConfirmEmailPost, readGroupsGroupsGet, createGroupGroupsPost, deleteGroupGroupsGroupIdDelete, readGroupGroupsGroupIdGet, updateGroupGroupsGroupIdPut, readGroupTransactionsGroupsGroupIdTransactionsGet, deleteUserFromGroupGroupsGroupIdUsersUserIdDelete, getMyInvitesInvitesMyInvitesGet, generateInviteLinkInvitesGroupIdGeneratePost, inviteByEmailInvitesGroupIdEmailPost, acceptInviteInvitesAcceptTokenPut, rejectInviteInvitesRejectTokenDelete, readTransactionsUserIsParticipantInTransactionsGet, createTransactionTransactionsPost, deleteTransactionTransactionsTransactionIdDelete, readTransactionTransactionsTransactionIdGet, updateTransactionTransactionsTransactionIdPut } from '../sdk.gen';
import { type MutationOptions, type DefaultError, queryOptions } from '@tanstack/svelte-query';
import type { DeleteUserAccountDeleteData, DeleteUserAccountDeleteResponse, ReadUsersMeAccountGetData, UpdateUserInfoAccountPutData, UpdateUserInfoAccountPutError, UpdateUserInfoAccountPutResponse, UpdatePasswordAccountPasswordPutData, UpdatePasswordAccountPasswordPutError, UpdatePasswordAccountPasswordPutResponse, RegisterAuthRegisterPostData, RegisterAuthRegisterPostError, RegisterAuthRegisterPostResponse, LoginAuthLoginPostData, LoginAuthLoginPostError, LoginAuthLoginPostResponse, ConfirmEmailAuthConfirmEmailPostData, ConfirmEmailAuthConfirmEmailPostError, ConfirmEmailAuthConfirmEmailPostResponse, ReadGroupsGroupsGetData, CreateGroupGroupsPostData, CreateGroupGroupsPostError, CreateGroupGroupsPostResponse, DeleteGroupGroupsGroupIdDeleteData, DeleteGroupGroupsGroupIdDeleteError, DeleteGroupGroupsGroupIdDeleteResponse, ReadGroupGroupsGroupIdGetData, UpdateGroupGroupsGroupIdPutData, UpdateGroupGroupsGroupIdPutError, UpdateGroupGroupsGroupIdPutResponse, ReadGroupTransactionsGroupsGroupIdTransactionsGetData, DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteData, DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteError, DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse, GetMyInvitesInvitesMyInvitesGetData, GenerateInviteLinkInvitesGroupIdGeneratePostData, GenerateInviteLinkInvitesGroupIdGeneratePostError, GenerateInviteLinkInvitesGroupIdGeneratePostResponse, InviteByEmailInvitesGroupIdEmailPostData, InviteByEmailInvitesGroupIdEmailPostError, InviteByEmailInvitesGroupIdEmailPostResponse, AcceptInviteInvitesAcceptTokenPutData, AcceptInviteInvitesAcceptTokenPutError, AcceptInviteInvitesAcceptTokenPutResponse, RejectInviteInvitesRejectTokenDeleteData, RejectInviteInvitesRejectTokenDeleteError, RejectInviteInvitesRejectTokenDeleteResponse, ReadTransactionsUserIsParticipantInTransactionsGetData, CreateTransactionTransactionsPostData, CreateTransactionTransactionsPostError, CreateTransactionTransactionsPostResponse, DeleteTransactionTransactionsTransactionIdDeleteData, DeleteTransactionTransactionsTransactionIdDeleteError, DeleteTransactionTransactionsTransactionIdDeleteResponse, ReadTransactionTransactionsTransactionIdGetData, UpdateTransactionTransactionsTransactionIdPutData, UpdateTransactionTransactionsTransactionIdPutError, UpdateTransactionTransactionsTransactionIdPutResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export const deleteUserAccountDeleteMutation = (options?: Partial<Options<DeleteUserAccountDeleteData>>) => {
    const mutationOptions: MutationOptions<DeleteUserAccountDeleteResponse, DefaultError, Options<DeleteUserAccountDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUserAccountDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const readUsersMeAccountGetQueryKey = (options?: Options<ReadUsersMeAccountGetData>) => createQueryKey('readUsersMeAccountGet', options);

export const readUsersMeAccountGetOptions = (options?: Options<ReadUsersMeAccountGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readUsersMeAccountGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readUsersMeAccountGetQueryKey(options)
    });
};

export const updateUserInfoAccountPutMutation = (options?: Partial<Options<UpdateUserInfoAccountPutData>>) => {
    const mutationOptions: MutationOptions<UpdateUserInfoAccountPutResponse, UpdateUserInfoAccountPutError, Options<UpdateUserInfoAccountPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateUserInfoAccountPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updatePasswordAccountPasswordPutMutation = (options?: Partial<Options<UpdatePasswordAccountPasswordPutData>>) => {
    const mutationOptions: MutationOptions<UpdatePasswordAccountPasswordPutResponse, UpdatePasswordAccountPasswordPutError, Options<UpdatePasswordAccountPasswordPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updatePasswordAccountPasswordPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const registerAuthRegisterPostQueryKey = (options: Options<RegisterAuthRegisterPostData>) => createQueryKey('registerAuthRegisterPost', options);

export const registerAuthRegisterPostOptions = (options: Options<RegisterAuthRegisterPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await registerAuthRegisterPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: registerAuthRegisterPostQueryKey(options)
    });
};

export const registerAuthRegisterPostMutation = (options?: Partial<Options<RegisterAuthRegisterPostData>>) => {
    const mutationOptions: MutationOptions<RegisterAuthRegisterPostResponse, RegisterAuthRegisterPostError, Options<RegisterAuthRegisterPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await registerAuthRegisterPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginAuthLoginPostQueryKey = (options: Options<LoginAuthLoginPostData>) => createQueryKey('loginAuthLoginPost', options);

export const loginAuthLoginPostOptions = (options: Options<LoginAuthLoginPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginAuthLoginPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginAuthLoginPostQueryKey(options)
    });
};

export const loginAuthLoginPostMutation = (options?: Partial<Options<LoginAuthLoginPostData>>) => {
    const mutationOptions: MutationOptions<LoginAuthLoginPostResponse, LoginAuthLoginPostError, Options<LoginAuthLoginPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginAuthLoginPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const confirmEmailAuthConfirmEmailPostQueryKey = (options: Options<ConfirmEmailAuthConfirmEmailPostData>) => createQueryKey('confirmEmailAuthConfirmEmailPost', options);

export const confirmEmailAuthConfirmEmailPostOptions = (options: Options<ConfirmEmailAuthConfirmEmailPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await confirmEmailAuthConfirmEmailPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: confirmEmailAuthConfirmEmailPostQueryKey(options)
    });
};

export const confirmEmailAuthConfirmEmailPostMutation = (options?: Partial<Options<ConfirmEmailAuthConfirmEmailPostData>>) => {
    const mutationOptions: MutationOptions<ConfirmEmailAuthConfirmEmailPostResponse, ConfirmEmailAuthConfirmEmailPostError, Options<ConfirmEmailAuthConfirmEmailPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await confirmEmailAuthConfirmEmailPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readGroupsGroupsGetQueryKey = (options?: Options<ReadGroupsGroupsGetData>) => createQueryKey('readGroupsGroupsGet', options);

export const readGroupsGroupsGetOptions = (options?: Options<ReadGroupsGroupsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readGroupsGroupsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readGroupsGroupsGetQueryKey(options)
    });
};

export const createGroupGroupsPostQueryKey = (options: Options<CreateGroupGroupsPostData>) => createQueryKey('createGroupGroupsPost', options);

export const createGroupGroupsPostOptions = (options: Options<CreateGroupGroupsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createGroupGroupsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createGroupGroupsPostQueryKey(options)
    });
};

export const createGroupGroupsPostMutation = (options?: Partial<Options<CreateGroupGroupsPostData>>) => {
    const mutationOptions: MutationOptions<CreateGroupGroupsPostResponse, CreateGroupGroupsPostError, Options<CreateGroupGroupsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createGroupGroupsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteGroupGroupsGroupIdDeleteMutation = (options?: Partial<Options<DeleteGroupGroupsGroupIdDeleteData>>) => {
    const mutationOptions: MutationOptions<DeleteGroupGroupsGroupIdDeleteResponse, DeleteGroupGroupsGroupIdDeleteError, Options<DeleteGroupGroupsGroupIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteGroupGroupsGroupIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readGroupGroupsGroupIdGetQueryKey = (options: Options<ReadGroupGroupsGroupIdGetData>) => createQueryKey('readGroupGroupsGroupIdGet', options);

export const readGroupGroupsGroupIdGetOptions = (options: Options<ReadGroupGroupsGroupIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readGroupGroupsGroupIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readGroupGroupsGroupIdGetQueryKey(options)
    });
};

export const updateGroupGroupsGroupIdPutMutation = (options?: Partial<Options<UpdateGroupGroupsGroupIdPutData>>) => {
    const mutationOptions: MutationOptions<UpdateGroupGroupsGroupIdPutResponse, UpdateGroupGroupsGroupIdPutError, Options<UpdateGroupGroupsGroupIdPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateGroupGroupsGroupIdPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readGroupTransactionsGroupsGroupIdTransactionsGetQueryKey = (options: Options<ReadGroupTransactionsGroupsGroupIdTransactionsGetData>) => createQueryKey('readGroupTransactionsGroupsGroupIdTransactionsGet', options);

export const readGroupTransactionsGroupsGroupIdTransactionsGetOptions = (options: Options<ReadGroupTransactionsGroupsGroupIdTransactionsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readGroupTransactionsGroupsGroupIdTransactionsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readGroupTransactionsGroupsGroupIdTransactionsGetQueryKey(options)
    });
};

export const deleteUserFromGroupGroupsGroupIdUsersUserIdDeleteMutation = (options?: Partial<Options<DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteData>>) => {
    const mutationOptions: MutationOptions<DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse, DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteError, Options<DeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUserFromGroupGroupsGroupIdUsersUserIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMyInvitesInvitesMyInvitesGetQueryKey = (options?: Options<GetMyInvitesInvitesMyInvitesGetData>) => createQueryKey('getMyInvitesInvitesMyInvitesGet', options);

export const getMyInvitesInvitesMyInvitesGetOptions = (options?: Options<GetMyInvitesInvitesMyInvitesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMyInvitesInvitesMyInvitesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMyInvitesInvitesMyInvitesGetQueryKey(options)
    });
};

export const generateInviteLinkInvitesGroupIdGeneratePostQueryKey = (options: Options<GenerateInviteLinkInvitesGroupIdGeneratePostData>) => createQueryKey('generateInviteLinkInvitesGroupIdGeneratePost', options);

export const generateInviteLinkInvitesGroupIdGeneratePostOptions = (options: Options<GenerateInviteLinkInvitesGroupIdGeneratePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await generateInviteLinkInvitesGroupIdGeneratePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: generateInviteLinkInvitesGroupIdGeneratePostQueryKey(options)
    });
};

export const generateInviteLinkInvitesGroupIdGeneratePostMutation = (options?: Partial<Options<GenerateInviteLinkInvitesGroupIdGeneratePostData>>) => {
    const mutationOptions: MutationOptions<GenerateInviteLinkInvitesGroupIdGeneratePostResponse, GenerateInviteLinkInvitesGroupIdGeneratePostError, Options<GenerateInviteLinkInvitesGroupIdGeneratePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await generateInviteLinkInvitesGroupIdGeneratePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const inviteByEmailInvitesGroupIdEmailPostQueryKey = (options: Options<InviteByEmailInvitesGroupIdEmailPostData>) => createQueryKey('inviteByEmailInvitesGroupIdEmailPost', options);

export const inviteByEmailInvitesGroupIdEmailPostOptions = (options: Options<InviteByEmailInvitesGroupIdEmailPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await inviteByEmailInvitesGroupIdEmailPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: inviteByEmailInvitesGroupIdEmailPostQueryKey(options)
    });
};

export const inviteByEmailInvitesGroupIdEmailPostMutation = (options?: Partial<Options<InviteByEmailInvitesGroupIdEmailPostData>>) => {
    const mutationOptions: MutationOptions<InviteByEmailInvitesGroupIdEmailPostResponse, InviteByEmailInvitesGroupIdEmailPostError, Options<InviteByEmailInvitesGroupIdEmailPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await inviteByEmailInvitesGroupIdEmailPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const acceptInviteInvitesAcceptTokenPutMutation = (options?: Partial<Options<AcceptInviteInvitesAcceptTokenPutData>>) => {
    const mutationOptions: MutationOptions<AcceptInviteInvitesAcceptTokenPutResponse, AcceptInviteInvitesAcceptTokenPutError, Options<AcceptInviteInvitesAcceptTokenPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await acceptInviteInvitesAcceptTokenPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const rejectInviteInvitesRejectTokenDeleteMutation = (options?: Partial<Options<RejectInviteInvitesRejectTokenDeleteData>>) => {
    const mutationOptions: MutationOptions<RejectInviteInvitesRejectTokenDeleteResponse, RejectInviteInvitesRejectTokenDeleteError, Options<RejectInviteInvitesRejectTokenDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await rejectInviteInvitesRejectTokenDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readTransactionsUserIsParticipantInTransactionsGetQueryKey = (options?: Options<ReadTransactionsUserIsParticipantInTransactionsGetData>) => createQueryKey('readTransactionsUserIsParticipantInTransactionsGet', options);

export const readTransactionsUserIsParticipantInTransactionsGetOptions = (options?: Options<ReadTransactionsUserIsParticipantInTransactionsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readTransactionsUserIsParticipantInTransactionsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readTransactionsUserIsParticipantInTransactionsGetQueryKey(options)
    });
};

export const createTransactionTransactionsPostQueryKey = (options: Options<CreateTransactionTransactionsPostData>) => createQueryKey('createTransactionTransactionsPost', options);

export const createTransactionTransactionsPostOptions = (options: Options<CreateTransactionTransactionsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTransactionTransactionsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTransactionTransactionsPostQueryKey(options)
    });
};

export const createTransactionTransactionsPostMutation = (options?: Partial<Options<CreateTransactionTransactionsPostData>>) => {
    const mutationOptions: MutationOptions<CreateTransactionTransactionsPostResponse, CreateTransactionTransactionsPostError, Options<CreateTransactionTransactionsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTransactionTransactionsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteTransactionTransactionsTransactionIdDeleteMutation = (options?: Partial<Options<DeleteTransactionTransactionsTransactionIdDeleteData>>) => {
    const mutationOptions: MutationOptions<DeleteTransactionTransactionsTransactionIdDeleteResponse, DeleteTransactionTransactionsTransactionIdDeleteError, Options<DeleteTransactionTransactionsTransactionIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTransactionTransactionsTransactionIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readTransactionTransactionsTransactionIdGetQueryKey = (options: Options<ReadTransactionTransactionsTransactionIdGetData>) => createQueryKey('readTransactionTransactionsTransactionIdGet', options);

export const readTransactionTransactionsTransactionIdGetOptions = (options: Options<ReadTransactionTransactionsTransactionIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readTransactionTransactionsTransactionIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readTransactionTransactionsTransactionIdGetQueryKey(options)
    });
};

export const updateTransactionTransactionsTransactionIdPutMutation = (options?: Partial<Options<UpdateTransactionTransactionsTransactionIdPutData>>) => {
    const mutationOptions: MutationOptions<UpdateTransactionTransactionsTransactionIdPutResponse, UpdateTransactionTransactionsTransactionIdPutError, Options<UpdateTransactionTransactionsTransactionIdPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTransactionTransactionsTransactionIdPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};