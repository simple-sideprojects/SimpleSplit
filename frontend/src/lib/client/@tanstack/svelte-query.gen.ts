// This file is auto-generated by @hey-api/openapi-ts

import { type Options, readUsersMeAccountGet, registerAuthRegisterPost, loginAuthLoginPost, readGroupsGroupsGet, createGroupGroupsPost, deleteGroupGroupsGroupIdDelete, readGroupGroupsGroupIdGet, updateGroupGroupsGroupIdPut, getMyInvitesInvitesMyInvitesGet, generateInviteLinkInvitesGroupIdGeneratePost, inviteByEmailInvitesGroupIdEmailPost, acceptInviteInvitesAcceptTokenGet, rejectInviteInvitesRejectTokenDelete } from '../sdk.gen';
import { queryOptions, type MutationOptions } from '@tanstack/svelte-query';
import type { ReadUsersMeAccountGetData, RegisterAuthRegisterPostData, RegisterAuthRegisterPostError, RegisterAuthRegisterPostResponse, LoginAuthLoginPostData, LoginAuthLoginPostError, LoginAuthLoginPostResponse, ReadGroupsGroupsGetData, CreateGroupGroupsPostData, CreateGroupGroupsPostError, CreateGroupGroupsPostResponse, DeleteGroupGroupsGroupIdDeleteData, DeleteGroupGroupsGroupIdDeleteError, DeleteGroupGroupsGroupIdDeleteResponse, ReadGroupGroupsGroupIdGetData, UpdateGroupGroupsGroupIdPutData, UpdateGroupGroupsGroupIdPutError, UpdateGroupGroupsGroupIdPutResponse, GetMyInvitesInvitesMyInvitesGetData, GenerateInviteLinkInvitesGroupIdGeneratePostData, GenerateInviteLinkInvitesGroupIdGeneratePostError, GenerateInviteLinkInvitesGroupIdGeneratePostResponse, InviteByEmailInvitesGroupIdEmailPostData, InviteByEmailInvitesGroupIdEmailPostError, InviteByEmailInvitesGroupIdEmailPostResponse, AcceptInviteInvitesAcceptTokenGetData, RejectInviteInvitesRejectTokenDeleteData, RejectInviteInvitesRejectTokenDeleteError, RejectInviteInvitesRejectTokenDeleteResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const readUsersMeAccountGetQueryKey = (options?: Options<ReadUsersMeAccountGetData>) => createQueryKey('readUsersMeAccountGet', options);

export const readUsersMeAccountGetOptions = (options?: Options<ReadUsersMeAccountGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readUsersMeAccountGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readUsersMeAccountGetQueryKey(options)
    });
};

export const registerAuthRegisterPostQueryKey = (options: Options<RegisterAuthRegisterPostData>) => createQueryKey('registerAuthRegisterPost', options);

export const registerAuthRegisterPostOptions = (options: Options<RegisterAuthRegisterPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await registerAuthRegisterPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: registerAuthRegisterPostQueryKey(options)
    });
};

export const registerAuthRegisterPostMutation = (options?: Partial<Options<RegisterAuthRegisterPostData>>) => {
    const mutationOptions: MutationOptions<RegisterAuthRegisterPostResponse, RegisterAuthRegisterPostError, Options<RegisterAuthRegisterPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await registerAuthRegisterPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginAuthLoginPostQueryKey = (options: Options<LoginAuthLoginPostData>) => createQueryKey('loginAuthLoginPost', options);

export const loginAuthLoginPostOptions = (options: Options<LoginAuthLoginPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginAuthLoginPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginAuthLoginPostQueryKey(options)
    });
};

export const loginAuthLoginPostMutation = (options?: Partial<Options<LoginAuthLoginPostData>>) => {
    const mutationOptions: MutationOptions<LoginAuthLoginPostResponse, LoginAuthLoginPostError, Options<LoginAuthLoginPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginAuthLoginPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readGroupsGroupsGetQueryKey = (options?: Options<ReadGroupsGroupsGetData>) => createQueryKey('readGroupsGroupsGet', options);

export const readGroupsGroupsGetOptions = (options?: Options<ReadGroupsGroupsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readGroupsGroupsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readGroupsGroupsGetQueryKey(options)
    });
};

export const createGroupGroupsPostQueryKey = (options: Options<CreateGroupGroupsPostData>) => createQueryKey('createGroupGroupsPost', options);

export const createGroupGroupsPostOptions = (options: Options<CreateGroupGroupsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createGroupGroupsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createGroupGroupsPostQueryKey(options)
    });
};

export const createGroupGroupsPostMutation = (options?: Partial<Options<CreateGroupGroupsPostData>>) => {
    const mutationOptions: MutationOptions<CreateGroupGroupsPostResponse, CreateGroupGroupsPostError, Options<CreateGroupGroupsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createGroupGroupsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteGroupGroupsGroupIdDeleteMutation = (options?: Partial<Options<DeleteGroupGroupsGroupIdDeleteData>>) => {
    const mutationOptions: MutationOptions<DeleteGroupGroupsGroupIdDeleteResponse, DeleteGroupGroupsGroupIdDeleteError, Options<DeleteGroupGroupsGroupIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteGroupGroupsGroupIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readGroupGroupsGroupIdGetQueryKey = (options: Options<ReadGroupGroupsGroupIdGetData>) => createQueryKey('readGroupGroupsGroupIdGet', options);

export const readGroupGroupsGroupIdGetOptions = (options: Options<ReadGroupGroupsGroupIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readGroupGroupsGroupIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readGroupGroupsGroupIdGetQueryKey(options)
    });
};

export const updateGroupGroupsGroupIdPutMutation = (options?: Partial<Options<UpdateGroupGroupsGroupIdPutData>>) => {
    const mutationOptions: MutationOptions<UpdateGroupGroupsGroupIdPutResponse, UpdateGroupGroupsGroupIdPutError, Options<UpdateGroupGroupsGroupIdPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateGroupGroupsGroupIdPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMyInvitesInvitesMyInvitesGetQueryKey = (options?: Options<GetMyInvitesInvitesMyInvitesGetData>) => createQueryKey('getMyInvitesInvitesMyInvitesGet', options);

export const getMyInvitesInvitesMyInvitesGetOptions = (options?: Options<GetMyInvitesInvitesMyInvitesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMyInvitesInvitesMyInvitesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMyInvitesInvitesMyInvitesGetQueryKey(options)
    });
};

export const generateInviteLinkInvitesGroupIdGeneratePostQueryKey = (options: Options<GenerateInviteLinkInvitesGroupIdGeneratePostData>) => createQueryKey('generateInviteLinkInvitesGroupIdGeneratePost', options);

export const generateInviteLinkInvitesGroupIdGeneratePostOptions = (options: Options<GenerateInviteLinkInvitesGroupIdGeneratePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await generateInviteLinkInvitesGroupIdGeneratePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: generateInviteLinkInvitesGroupIdGeneratePostQueryKey(options)
    });
};

export const generateInviteLinkInvitesGroupIdGeneratePostMutation = (options?: Partial<Options<GenerateInviteLinkInvitesGroupIdGeneratePostData>>) => {
    const mutationOptions: MutationOptions<GenerateInviteLinkInvitesGroupIdGeneratePostResponse, GenerateInviteLinkInvitesGroupIdGeneratePostError, Options<GenerateInviteLinkInvitesGroupIdGeneratePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await generateInviteLinkInvitesGroupIdGeneratePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const inviteByEmailInvitesGroupIdEmailPostQueryKey = (options: Options<InviteByEmailInvitesGroupIdEmailPostData>) => createQueryKey('inviteByEmailInvitesGroupIdEmailPost', options);

export const inviteByEmailInvitesGroupIdEmailPostOptions = (options: Options<InviteByEmailInvitesGroupIdEmailPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await inviteByEmailInvitesGroupIdEmailPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: inviteByEmailInvitesGroupIdEmailPostQueryKey(options)
    });
};

export const inviteByEmailInvitesGroupIdEmailPostMutation = (options?: Partial<Options<InviteByEmailInvitesGroupIdEmailPostData>>) => {
    const mutationOptions: MutationOptions<InviteByEmailInvitesGroupIdEmailPostResponse, InviteByEmailInvitesGroupIdEmailPostError, Options<InviteByEmailInvitesGroupIdEmailPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await inviteByEmailInvitesGroupIdEmailPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const acceptInviteInvitesAcceptTokenGetQueryKey = (options: Options<AcceptInviteInvitesAcceptTokenGetData>) => createQueryKey('acceptInviteInvitesAcceptTokenGet', options);

export const acceptInviteInvitesAcceptTokenGetOptions = (options: Options<AcceptInviteInvitesAcceptTokenGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await acceptInviteInvitesAcceptTokenGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: acceptInviteInvitesAcceptTokenGetQueryKey(options)
    });
};

export const rejectInviteInvitesRejectTokenDeleteMutation = (options?: Partial<Options<RejectInviteInvitesRejectTokenDeleteData>>) => {
    const mutationOptions: MutationOptions<RejectInviteInvitesRejectTokenDeleteResponse, RejectInviteInvitesRejectTokenDeleteError, Options<RejectInviteInvitesRejectTokenDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await rejectInviteInvitesRejectTokenDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};