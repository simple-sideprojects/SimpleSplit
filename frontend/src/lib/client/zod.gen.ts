// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zBodyLoginAuthLoginPost = z.object({
    grant_type: z.union([
        z.string().regex(/^password$/),
        z.null()
    ]).optional(),
    username: z.string(),
    password: z.string(),
    scope: z.string().optional().default(''),
    client_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    client_secret: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zBodyUpdateTransactionTransactionsTransactionIdPut = z.object({
    transaction_in: z.object({
        amount: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        title: z.union([
            z.string(),
            z.null()
        ]).optional(),
        purchased_on: z.union([
            z.string().datetime(),
            z.null()
        ]).optional(),
        transaction_type: z.union([
            z.enum([
                'EVEN',
                'AMOUNT',
                'PERCENTAGE'
            ]),
            z.null()
        ]).optional(),
        payer_id: z.union([
            z.string().uuid(),
            z.null()
        ]).optional()
    }),
    settings: z.object({
        PROD: z.boolean(),
        FRONTEND_URL: z.string(),
        DATABASE_URL: z.string(),
        SECRET_KEY: z.string(),
        ALGORITHM: z.string(),
        ACCESS_TOKEN_EXPIRE_MINUTES: z.number().int(),
        SMTP_SERVER: z.string(),
        SMTP_PORT: z.number().int(),
        SMTP_USER: z.string(),
        SMTP_PASSWORD: z.string(),
        SMTP_USE_TLS: z.boolean(),
        SENDER_EMAIL: z.string(),
        EMAIL_ACCOUNT_VERIFICATION: z.boolean()
    })
});

export const zCreateGroup = z.object({
    name: z.string()
});

export const zEmailConfirmationRequest = z.object({
    frontend_url: z.string(),
    token: z.number().int()
});

export const zGroup = z.object({
    id: z.string().uuid().optional(),
    created_at: z.string().datetime().optional(),
    updated_at: z.string().datetime().optional(),
    name: z.string()
});

export const zGroupInviteCreate = z.object({
    email: z.union([
        z.string().email(),
        z.null()
    ]).optional()
});

export const zGroupInviteResponse = z.object({
    id: z.string().uuid(),
    email: z.union([
        z.string(),
        z.null()
    ]).optional(),
    group_id: z.string().uuid(),
    token: z.string(),
    created_at: z.string().datetime()
});

export const zGroupWithUsersResponse = z.object({
    id: z.string().uuid(),
    name: z.string(),
    users: z.array(z.object({
        id: z.string().uuid(),
        email: z.string().email(),
        username: z.string(),
        created_at: z.string().datetime(),
        updated_at: z.string().datetime()
    })).optional().default([]),
    invites: z.union([
        z.array(zGroupInviteResponse),
        z.null()
    ]).optional()
});

export const zHttpValidationError = z.object({
    detail: z.array(z.object({
        loc: z.array(z.unknown()),
        msg: z.string(),
        type: z.string()
    })).optional()
});

export const zInvitationTokenResponse = z.object({
    token: z.string()
});

export const zSettings = z.object({
    PROD: z.boolean(),
    FRONTEND_URL: z.string(),
    DATABASE_URL: z.string(),
    SECRET_KEY: z.string(),
    ALGORITHM: z.string(),
    ACCESS_TOKEN_EXPIRE_MINUTES: z.number().int(),
    SMTP_SERVER: z.string(),
    SMTP_PORT: z.number().int(),
    SMTP_USER: z.string(),
    SMTP_PASSWORD: z.string(),
    SMTP_USE_TLS: z.boolean(),
    SENDER_EMAIL: z.string(),
    EMAIL_ACCOUNT_VERIFICATION: z.boolean()
});

export const zToken = z.object({
    access_token: z.string(),
    token_type: z.string()
});

export const zTransactionCreate = z.object({
    id: z.string().uuid().optional(),
    created_at: z.string().datetime().optional(),
    updated_at: z.string().datetime().optional(),
    amount: z.number().int(),
    title: z.string(),
    purchased_on: z.string().datetime().optional(),
    transaction_type: z.enum([
        'EVEN',
        'AMOUNT',
        'PERCENTAGE'
    ]).optional(),
    group_id: z.string().uuid(),
    payer_id: z.string().uuid(),
    participants: z.array(z.object({
        amount_owed: z.number().int(),
        debtor_id: z.string().uuid()
    }))
});

export const zTransactionParticipantCreate = z.object({
    amount_owed: z.number().int(),
    debtor_id: z.string().uuid()
});

export const zTransactionParticipantRead = z.object({
    amount_owed: z.number().int(),
    transaction_id: z.string().uuid(),
    debtor_id: z.string().uuid(),
    id: z.string().uuid(),
    debtor: z.object({
        id: z.string().uuid().optional(),
        created_at: z.string().datetime().optional(),
        updated_at: z.string().datetime().optional(),
        username: z.string(),
        email: z.string(),
        email_verified: z.boolean().optional().default(false),
        email_verification_token: z.number().int().optional(),
        password: z.string().optional()
    })
});

export const zTransactionRead = z.object({
    id: z.string().uuid().optional(),
    created_at: z.string().datetime().optional(),
    updated_at: z.string().datetime().optional(),
    amount: z.number().int(),
    title: z.string(),
    purchased_on: z.string().datetime().optional(),
    transaction_type: z.enum([
        'EVEN',
        'AMOUNT',
        'PERCENTAGE'
    ]).optional(),
    group_id: z.string().uuid(),
    payer_id: z.string().uuid(),
    participants: z.array(zTransactionParticipantRead),
    payer: z.object({
        id: z.string().uuid().optional(),
        created_at: z.string().datetime().optional(),
        updated_at: z.string().datetime().optional(),
        username: z.string(),
        email: z.string(),
        email_verified: z.boolean().optional().default(false),
        email_verification_token: z.number().int().optional(),
        password: z.string().optional()
    }),
    group: zGroup
});

export const zTransactionType = z.enum([
    'EVEN',
    'AMOUNT',
    'PERCENTAGE'
]);

export const zTransactionUpdate = z.object({
    amount: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    purchased_on: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    transaction_type: z.union([
        zTransactionType,
        z.null()
    ]).optional(),
    payer_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zUpdateGroup = z.object({
    name: z.string()
});

export const zUser = z.object({
    id: z.string().uuid().optional(),
    created_at: z.string().datetime().optional(),
    updated_at: z.string().datetime().optional(),
    username: z.string(),
    email: z.string(),
    email_verified: z.boolean().optional().default(false),
    email_verification_token: z.number().int().optional(),
    password: z.string().optional()
});

export const zUserCreate = z.object({
    email: z.string().email(),
    password: z.string(),
    username: z.string()
});

export const zUserInfoUpdate = z.object({
    username: z.string()
});

export const zUserResponse = z.object({
    id: z.string().uuid(),
    email: z.string().email(),
    username: z.string(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime()
});

export const zUserUpdatePassword = z.object({
    old_password: z.string(),
    new_password: z.string()
});

export const zValidationError = z.object({
    loc: z.array(z.unknown()),
    msg: z.string(),
    type: z.string()
});

export const zDeleteUserAccountDeleteResponse = z.object({});

export const zReadUsersMeAccountGetResponse = zUserResponse;

export const zUpdateUserInfoAccountPutResponse = z.object({});

export const zUpdatePasswordAccountPasswordPutResponse = z.object({});

export const zRegisterAuthRegisterPostResponse = zUserResponse;

export const zLoginAuthLoginPostResponse = zToken;

export const zConfirmEmailAuthConfirmEmailPostResponse = zToken;

export const zReadGroupsGroupsGetResponse = z.array(zGroup);

export const zCreateGroupGroupsPostResponse = zGroup;

export const zDeleteGroupGroupsGroupIdDeleteResponse = z.object({});

export const zReadGroupGroupsGroupIdGetResponse = zGroupWithUsersResponse;

export const zUpdateGroupGroupsGroupIdPutResponse = zGroup;

export const zReadGroupTransactionsGroupsGroupIdTransactionsGetResponse = z.array(zTransactionRead);

export const zDeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse = zGroupWithUsersResponse;

export const zGetMyInvitesInvitesMyInvitesGetResponse = z.array(zGroupInviteResponse);

export const zGenerateInviteLinkInvitesGroupIdGeneratePostResponse = zInvitationTokenResponse;

export const zInviteByEmailInvitesGroupIdEmailPostResponse = zGroupInviteResponse;

export const zAcceptInviteInvitesAcceptTokenGetResponse = z.object({});

export const zRejectInviteInvitesRejectTokenDeleteResponse = z.object({});

export const zReadTransactionsUserIsParticipantInTransactionsGetResponse = z.array(zTransactionRead);

export const zCreateTransactionTransactionsPostResponse = zTransactionRead;

export const zDeleteTransactionTransactionsTransactionIdDeleteResponse = z.void();

export const zReadTransactionTransactionsTransactionIdGetResponse = zTransactionRead;

export const zUpdateTransactionTransactionsTransactionIdPutResponse = zTransactionRead;