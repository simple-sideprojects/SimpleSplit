// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zBodyLoginAuthLoginPost = z.object({
    grant_type: z.union([
        z.string().regex(/^password$/),
        z.null()
    ]).optional(),
    username: z.string(),
    password: z.string(),
    scope: z.string().optional().default(''),
    client_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    client_secret: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zCreateGroup = z.object({
    name: z.string()
});

export const zGroup = z.object({
    id: z.string().uuid().optional(),
    created_at: z.string().datetime().optional(),
    updated_at: z.string().datetime().optional(),
    name: z.string()
});

export const zGroupInviteCreate = z.object({
    email: z.union([
        z.string().email(),
        z.null()
    ]).optional()
});

export const zGroupInviteResponse = z.object({
    id: z.string().uuid(),
    email: z.union([
        z.string(),
        z.null()
    ]).optional(),
    group_id: z.string().uuid(),
    token: z.string(),
    created_at: z.string().datetime()
});

export const zGroupWithUsersResponse = z.object({
    id: z.string().uuid(),
    name: z.string(),
    users: z.array(z.object({
        id: z.string().uuid(),
        email: z.string().email(),
        username: z.string(),
        created_at: z.string().datetime(),
        updated_at: z.string().datetime()
    })).optional().default([]),
    invites: z.union([
        z.array(zGroupInviteResponse),
        z.null()
    ]).optional()
});

export const zHttpValidationError = z.object({
    detail: z.array(z.object({
        loc: z.array(z.unknown()),
        msg: z.string(),
        type: z.string()
    })).optional()
});

export const zInvitationTokenResponse = z.object({
    token: z.string()
});

export const zToken = z.object({
    access_token: z.string(),
    token_type: z.string()
});

export const zUpdateGroup = z.object({
    name: z.string()
});

export const zUserCreate = z.object({
    email: z.string().email(),
    password: z.string(),
    username: z.string()
});

export const zUserResponse = z.object({
    id: z.string().uuid(),
    email: z.string().email(),
    username: z.string(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime()
});

export const zValidationError = z.object({
    loc: z.array(z.unknown()),
    msg: z.string(),
    type: z.string()
});

export const zReadUsersMeAccountGetResponse = zUserResponse;

export const zRegisterAuthRegisterPostResponse = zUserResponse;

export const zLoginAuthLoginPostResponse = zToken;

export const zReadGroupsGroupsGetResponse = z.array(zGroup);

export const zCreateGroupGroupsPostResponse = zGroup;

export const zDeleteGroupGroupsGroupIdDeleteResponse = z.object({});

export const zReadGroupGroupsGroupIdGetResponse = zGroupWithUsersResponse;

export const zUpdateGroupGroupsGroupIdPutResponse = zGroup;

export const zDeleteUserFromGroupGroupsGroupIdUsersUserIdDeleteResponse = zGroupWithUsersResponse;

export const zGetMyInvitesInvitesMyInvitesGetResponse = z.array(zGroupInviteResponse);

export const zGenerateInviteLinkInvitesGroupIdGeneratePostResponse = zInvitationTokenResponse;

export const zInviteByEmailInvitesGroupIdEmailPostResponse = zGroupInviteResponse;

export const zAcceptInviteInvitesAcceptTokenGetResponse = z.object({});

export const zRejectInviteInvitesRejectTokenDeleteResponse = z.object({});